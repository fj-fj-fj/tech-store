# Generated by Django 3.2.6 on 2021-08-26 18:03

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Avatar',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('url', models.CharField(max_length=200, verbose_name='Ссылка')),
            ],
            options={
                'verbose_name': 'Аватар',
                'verbose_name_plural': 'Аватары',
                'db_table': 'avatar',
            },
        ),
        migrations.CreateModel(
            name='Employee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(default='', max_length=100, verbose_name='Никнэйм')),
                ('username', models.CharField(default='', max_length=200, verbose_name='Имя')),
                ('password', models.CharField(max_length=250, verbose_name='Пароль')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('email', models.CharField(default='', max_length=150, verbose_name='Почта')),
                ('actived', models.BooleanField(default=True, verbose_name='Активен')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удалён')),
                ('rate', models.FloatField(default=0.0, verbose_name='Рэйтинг')),
                ('avatar', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.avatar', verbose_name='Идентификатор аватара')),
                ('curator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Идентификатор куратор')),
            ],
            options={
                'verbose_name': 'Сотрудник',
                'verbose_name_plural': 'Сотрудники',
                'db_table': 'employee',
            },
        ),
        migrations.CreateModel(
            name='EmployeeType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
            ],
            options={
                'verbose_name': 'Должность',
                'verbose_name_plural': 'Должности',
                'db_table': 'employee_type',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('prefix', models.CharField(max_length=3, verbose_name='Префикс задач')),
                ('description', models.CharField(max_length=250, verbose_name='Описание')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('actived', models.BooleanField(default=True, verbose_name='Активен')),
                ('deleted', models.BooleanField(default=False, verbose_name='Удалён')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Создатель сотрудник')),
                ('avatar', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.avatar', verbose_name='Аватар проекта')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='ProjectEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Сотрудник')),
                ('employee_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employeetype', verbose_name='Квалификация')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.project', verbose_name='Проект')),
            ],
            options={
                'verbose_name': 'Менеджер с доступным проектом',
                'verbose_name_plural': 'Менеджеры с доступными проектами',
                'db_table': 'project_employee',
            },
        ),
        migrations.CreateModel(
            name='ProjectType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('description', models.CharField(max_length=250, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Тип проекта',
                'verbose_name_plural': 'Типы проектов',
                'db_table': 'project_type',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('name', models.CharField(max_length=20, primary_key=True, serialize=False, verbose_name='Название тэга')),
            ],
            options={
                'verbose_name': 'Тэг',
                'verbose_name_plural': 'Тэги',
                'db_table': 'tag',
            },
        ),
        migrations.CreateModel(
            name='Task',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('name', models.CharField(max_length=150, verbose_name='Наименование задачи')),
                ('description', models.CharField(max_length=250, verbose_name='Описание задачи')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Обновлён')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='related_author', to='task_manager.projectemployee', verbose_name='Автор задачи')),
                ('executor', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.projectemployee', verbose_name='Исполнитель')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.task', verbose_name='Предыдущая задача')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, related_name='related_project', to='task_manager.projectemployee', verbose_name='Идентификатор проекта')),
            ],
            options={
                'verbose_name': 'Задача',
                'verbose_name_plural': 'Задачи',
                'db_table': 'task',
            },
        ),
        migrations.CreateModel(
            name='TaskComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('comment', models.CharField(max_length=250, verbose_name='Комментарий')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Сотрудник')),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.project', verbose_name='Проект')),
                ('task', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.task', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'Комментарий к задаче',
                'verbose_name_plural': 'Комментарии к задачам',
                'db_table': 'task_comment',
            },
        ),
        migrations.CreateModel(
            name='TaskStatus',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, verbose_name='Наименование')),
                ('description', models.CharField(default='', max_length=250, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Статус задачи',
                'verbose_name_plural': 'Статусы задач',
                'db_table': 'task_status',
            },
        ),
        migrations.CreateModel(
            name='TaskTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.ForeignKey(db_column='name', on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.tag', verbose_name='Название')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.project', verbose_name='Проект')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.task', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'Тэг задачи',
                'verbose_name_plural': 'Тэги задач',
                'db_table': 'task_tag',
            },
        ),
        migrations.CreateModel(
            name='TaskFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('filename', models.CharField(max_length=200, verbose_name='Название файла')),
                ('date_create', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('last_update', models.DateTimeField(auto_now=True, verbose_name='Обновлено')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Сотрудник')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.taskcomment', verbose_name='Проект')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, related_name='related_task', to='task_manager.taskcomment', verbose_name='Задача')),
                ('task_comment', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='related_task_comment', to='task_manager.taskcomment', verbose_name='Комментарий')),
            ],
            options={
                'verbose_name': 'Файл с задачей',
                'verbose_name_plural': 'Файлы с задачами',
                'db_table': 'task_file',
            },
        ),
        migrations.CreateModel(
            name='TaskEmployee',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('employee', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.employee', verbose_name='Сотрудник')),
                ('project', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.project', verbose_name='Проект')),
                ('task', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.task', verbose_name='Задача')),
            ],
            options={
                'verbose_name': 'Задача для сотрудников',
                'verbose_name_plural': 'Задачи для сотрудников',
                'db_table': 'task_employee',
            },
        ),
        migrations.AddField(
            model_name='task',
            name='task_status',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.taskstatus', verbose_name='Статус задачи'),
        ),
        migrations.AddField(
            model_name='project',
            name='project_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='task_manager.projecttype', verbose_name='Тип проекта'),
        ),
        migrations.AddIndex(
            model_name='tasktag',
            index=models.Index(fields=['name'], name='taskstag_name'),
        ),
        migrations.AddConstraint(
            model_name='tasktag',
            constraint=models.UniqueConstraint(fields=('project', 'task', 'name'), name='uk_project_task_name'),
        ),
        migrations.AddIndex(
            model_name='taskfile',
            index=models.Index(fields=['employee_id'], name='taskfile_employee'),
        ),
        migrations.AddIndex(
            model_name='taskfile',
            index=models.Index(fields=['task_comment_id'], name='taskfile_task_comment'),
        ),
        migrations.AddIndex(
            model_name='taskfile',
            index=models.Index(fields=['project_id', 'task_id', 'task_comment_id'], name='taskfile_project_task_taskcom'),
        ),
        migrations.AddConstraint(
            model_name='taskfile',
            constraint=models.UniqueConstraint(fields=('project', 'task', 'id'), name='uk_project_task_id'),
        ),
        migrations.AddIndex(
            model_name='taskemployee',
            index=models.Index(fields=['project_id', 'employee_id'], name='taskemployee_project_employee'),
        ),
        migrations.AddIndex(
            model_name='taskemployee',
            index=models.Index(fields=['employee_id'], name='taskemployee_employee'),
        ),
        migrations.AddConstraint(
            model_name='taskemployee',
            constraint=models.UniqueConstraint(fields=('project', 'task', 'employee'), name='uk_project_task_employee'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['employee_id'], name='taskcomment_employee'),
        ),
        migrations.AddIndex(
            model_name='taskcomment',
            index=models.Index(fields=['project_id', 'task_id'], name='taskcomment_project_task'),
        ),
        migrations.AddConstraint(
            model_name='taskcomment',
            constraint=models.UniqueConstraint(fields=('task', 'project', 'id'), name='uk_task_project_id'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['author_id'], name='task_author'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['task_status_id'], name='task_taskstatus'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['parent_id'], name='task_parent'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['project_id', 'parent_id'], name='task_project_parent'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['executor_id'], name='task_executor'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['project_id', 'author_id'], name='task_project_author'),
        ),
        migrations.AddIndex(
            model_name='task',
            index=models.Index(fields=['project_id', 'executor_id'], name='task_project_executor'),
        ),
        migrations.AddConstraint(
            model_name='task',
            constraint=models.UniqueConstraint(fields=('project', 'id'), name='uk_project_project_id'),
        ),
        migrations.AddIndex(
            model_name='projectemployee',
            index=models.Index(fields=['employee_type_id'], name='projectemployee_employeetype'),
        ),
        migrations.AddIndex(
            model_name='projectemployee',
            index=models.Index(fields=['employee_id'], name='projectemployee_employee'),
        ),
        migrations.AddConstraint(
            model_name='projectemployee',
            constraint=models.UniqueConstraint(fields=('project', 'employee'), name='uk_project_employee'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['avatar_id'], name='project_avatar,'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['author_id'], name='project_author'),
        ),
        migrations.AddIndex(
            model_name='project',
            index=models.Index(fields=['project_type_id'], name='project_projecttype,'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['avatar_id'], name='employee_avatar'),
        ),
        migrations.AddIndex(
            model_name='employee',
            index=models.Index(fields=['curator_id'], name='employee_curator'),
        ),
    ]
